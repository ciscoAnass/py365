import os
import json
import subprocess
import sys
import base64
import html
from datetime import datetime

class DockerImageVulnerabilityScanner:
    def __init__(self, images=None):
        self.images = images or []
        self.scan_results = {}
        self.critical_vulnerabilities = {}
        self.timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    def validate_docker_installation(self):
        try:
            subprocess.run(["docker", "--version"], capture_output=True, text=True, check=True)
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("Docker is not installed or accessible.")
            sys.exit(1)

    def validate_trivy_installation(self):
        try:
            subprocess.run(["trivy", "--version"], capture_output=True, text=True, check=True)
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("Trivy is not installed. Please install Trivy first.")
            sys.exit(1)

    def scan_images(self):
        self.validate_docker_installation()
        self.validate_trivy_installation()

        for image in self.images:
            try:
                result = subprocess.run(
                    ["trivy", "image", "--format", "json", image],
                    capture_output=True,
                    text=True,
                    check=True
                )
                self.scan_results[image] = json.loads(result.stdout)
            except subprocess.CalledProcessError as e:
                print(f"Error scanning {image}: {e}")
                self.scan_results[image] = None

    def analyze_vulnerabilities(self):
        for image, scan_result in self.scan_results.items():
            if scan_result:
                critical_vulns = [
                    vuln for vuln in scan_result.get('Results', [])
                    if vuln.get('Vulnerabilities')
                ]
                self.critical_vulnerabilities[image] = critical_vulns

    def generate_html_report(self):
        html_template = f"""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <title>Docker Image Vulnerability Report</title>
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; max-width: 1200px; margin: 0 auto; padding: 20px; }}
                h1 {{ color: #333; }}
                .report-header {{ background-color: #f4f4f4; padding: 10px; margin-bottom: 20px; }}
                .image-section {{ margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; }}
                .vulnerability {{ background-color: #ffeeee; border: 1px solid #ff0000; margin: 10px 0; padding: 10px; }}
                .severity-critical {{ color: red; font-weight: bold; }}
                .severity-high {{ color: orange; }}
                .severity-medium {{ color: darkorange; }}
            </style>
        </head>
        <body>
            <div class="report-header">
                <h1>Docker Image Vulnerability Scan Report</h1>
                <p>Scan Timestamp: {self.timestamp}</p>
            </div>
            {self._generate_vulnerability_sections()}
        </body>
        </html>
        """
        return html_template

    def _generate_vulnerability_sections(self):
        sections = []
        for image, vulnerabilities in self.critical_vulnerabilities.items():
            if vulnerabilities:
                section = f'<div class="image-section"><h2>{html.escape(image)}</h2>'
                for vuln_list in vulnerabilities:
                    for vulnerability in vuln_list.get('Vulnerabilities', []):
                        section += f'''
                        <div class="vulnerability">
                            <h3 class="severity-{vulnerability.get('Severity', 'unknown').lower()}">{html.escape(vulnerability.get('VulnerabilityID', 'Unknown'))}</h3>
                            <p><strong>Package:</strong> {html.escape(vulnerability.get('PkgName', 'N/A'))}</p>
                            <p><strong>Severity:</strong> {html.escape(vulnerability.get('Severity', 'N/A'))}</p>
                            <p><strong>Title:</strong> {html.escape(vulnerability.get('Title', 'No title'))}</p>
                        </div>
                        '''
                section += '</div>'
                sections.append(section)
        return ''.join(sections) if sections else '<p>No critical vulnerabilities found.</p>'

    def save_report(self, filename='vulnerability_report.html'):
        report = self.generate_html_report()
        with open(filename, 'w') as f:
            f.write(report)
        print(f"Report saved to {filename}")

def main():
    default_images = [
        'ubuntu:latest',
        'nginx:latest',
        'python:3.9',
        'alpine:latest'
    ]

    scanner = DockerImageVulnerabilityScanner(images=default_images)
    scanner.scan_images()
    scanner.analyze_vulnerabilities()
    scanner.save_report()

if __name__ == "__main__":
    main()